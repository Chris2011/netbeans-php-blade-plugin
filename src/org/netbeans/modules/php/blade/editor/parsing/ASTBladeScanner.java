/* The following code was generated by JFlex 1.4.3 on 4/11/22, 4:17 PM */


package org.netbeans.modules.php.blade.editor.parsing;

import java_cup.runtime.*;
import org.netbeans.modules.php.blade.editor.BladeSyntax;
import org.netbeans.modules.php.editor.parser.PHPParseResult;
import org.netbeans.modules.php.blade.editor.common.ByteStack;
import org.openide.filesystems.FileObject;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/11/22, 4:17 PM from the specification file
 * <tt>ASTBladeScanner.flex</tt>
 */
public class ASTBladeScanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_BLADE_PARAMETER_EXPRESSION = 34;
  public static final int ST_PHP = 26;
  public static final int ST_DOCBLOCK = 14;
  public static final int ST_BLADE_ECHO = 30;
  public static final int ST_LOOKING_FOR_LABEL = 4;
  public static final int ST_HTML_COMMENT = 38;
  public static final int ST_PHP_LOOP_EXPRESSION = 16;
  public static final int ST_BLADE_ECHO_ESCAPED = 32;
  public static final int ST_COMMENT = 28;
  public static final int ST_BLADE_DIRECTIVE = 8;
  public static final int ST_LOOK_FOR_DIRECTIVE_ARGUMENTS = 36;
  public static final int ST_BLADE_INCLUDE_ARGS = 20;
  public static final int ST_LOOKING_FOR_INCLUDED_VARS = 6;
  public static final int ST_STRING_DBQUOTE = 10;
  public static final int ST_BLADE_PARAMETER = 22;
  public static final int ST_STRING_SQUOTE = 12;
  public static final int ST_LOOKING_FOR_PATH = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_INLINE_PHP = 24;
  public static final int ST_PHP_CONDITION_EXPRESSION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\1\0\1\7\1\4\22\0\1\21\1\16\1\52"+
    "\1\25\1\55\1\57\1\24\1\22\1\51\1\54\2\0\1\53\1\17"+
    "\1\3\1\12\12\1\1\0\1\6\1\56\1\62\1\60\1\61\1\20"+
    "\1\46\1\13\1\30\1\35\1\27\1\50\1\13\1\40\1\32\2\13"+
    "\1\37\1\13\1\34\1\33\1\42\1\13\1\44\1\26\1\31\1\47"+
    "\1\43\1\41\1\45\1\36\1\13\4\0\1\2\1\0\1\46\1\13"+
    "\1\30\1\23\1\27\1\50\1\13\1\40\1\32\2\13\1\37\1\13"+
    "\1\34\1\33\1\42\1\13\1\44\1\26\1\31\1\47\1\43\1\41"+
    "\1\45\1\36\1\13\1\14\1\24\1\15\1\0\53\10\1\10\12\10"+
    "\1\10\4\10\1\10\5\10\27\10\1\10\37\10\1\10\10\10\u01c2\10"+
    "\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\201\0\5\10"+
    "\1\0\2\10\2\0\4\10\1\0\1\10\6\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\10\0\246\10"+
    "\1\0\46\10\2\0\1\10\6\0\51\10\107\0\33\10\4\0\4\10"+
    "\55\0\53\10\25\0\12\11\4\0\2\10\1\0\143\10\1\0\1\10"+
    "\17\0\2\10\7\0\2\10\12\11\3\10\2\0\1\10\20\0\1\10"+
    "\1\0\36\10\35\0\131\10\13\0\1\10\16\0\12\11\41\10\11\0"+
    "\2\10\4\0\1\10\5\0\26\10\4\0\1\10\11\0\1\10\3\0"+
    "\1\10\27\0\31\10\7\0\13\10\65\0\25\10\1\0\22\10\74\0"+
    "\66\10\3\0\1\10\22\0\1\10\7\0\12\10\4\0\12\11\1\0"+
    "\20\10\4\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\1\10\3\0\4\10\3\0\1\10\20\0\1\10\15\0\2\10\1\0"+
    "\3\10\4\0\12\11\2\10\12\0\1\10\10\0\6\10\4\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\37\0\4\10\1\0\1\10\7\0\12\11\2\0\3\10\20\0\11\10"+
    "\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\3\0\1\10\22\0\1\10\17\0\2\10\4\0\12\11\11\0\1\10"+
    "\13\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\11"+
    "\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10"+
    "\3\0\14\10\26\0\1\10\25\0\12\11\25\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\20\10\3\0\1\10\32\0\3\10\5\0\2\10"+
    "\4\0\12\11\20\0\1\10\4\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\3\0\1\10\40\0\1\10\1\0\2\10"+
    "\4\0\12\11\1\0\2\10\21\0\11\10\1\0\3\10\1\0\51\10"+
    "\2\0\1\10\20\0\1\10\5\0\3\10\10\0\3\10\4\0\12\11"+
    "\12\0\6\10\5\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10"+
    "\2\0\7\10\37\0\12\11\21\0\60\10\1\0\2\10\14\0\7\10"+
    "\11\0\12\11\47\0\2\10\1\0\1\10\1\0\5\10\1\0\30\10"+
    "\1\0\1\10\1\0\12\10\1\0\2\10\11\0\1\10\2\0\5\10"+
    "\1\0\1\10\11\0\12\11\2\0\4\10\40\0\1\10\37\0\12\11"+
    "\26\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0\1\10"+
    "\12\11\6\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0"+
    "\3\10\4\0\15\10\14\0\1\10\1\0\12\11\6\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0"+
    "\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\17\10\1\0\71\10\1\0\4\10\2\0\103\10\45\0\20\10\20\0"+
    "\126\10\2\0\6\10\3\0\u026c\10\2\0\21\10\1\0\32\10\5\0"+
    "\113\10\6\0\10\10\7\0\15\10\1\0\4\10\16\0\22\10\16\0"+
    "\22\10\16\0\15\10\1\0\3\10\17\0\64\10\43\0\1\10\4\0"+
    "\1\10\3\0\12\11\46\0\12\11\6\0\131\10\7\0\5\10\2\0"+
    "\42\10\1\0\1\10\5\0\106\10\12\0\37\10\47\0\12\11\36\10"+
    "\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\11\46\0\27\10"+
    "\11\0\65\10\53\0\12\11\6\0\12\11\15\0\1\10\135\0\57\10"+
    "\21\0\7\10\4\0\12\11\51\0\36\10\15\0\2\10\12\11\54\10"+
    "\32\0\44\10\34\0\12\11\3\0\3\10\12\11\44\10\2\0\11\10"+
    "\7\0\53\10\2\0\3\10\51\0\4\10\1\0\6\10\1\0\2\10"+
    "\3\0\1\10\5\0\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10"+
    "\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10"+
    "\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10"+
    "\1\0\7\10\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10"+
    "\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10"+
    "\5\0\5\10\4\0\1\10\64\0\2\10\u0a7b\0\57\10\1\0\57\10"+
    "\1\0\205\10\6\0\4\10\3\0\2\10\14\0\46\10\1\0\1\10"+
    "\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\120\0\1\10\u01d5\0\2\10\52\0\5\10"+
    "\5\0\2\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10"+
    "\5\0\53\10\1\0\136\10\21\0\40\10\60\0\20\10\u0200\0\u19c0\10"+
    "\100\0\u51fd\10\3\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10"+
    "\12\11\2\10\24\0\57\10\20\0\37\10\2\0\106\10\61\0\11\10"+
    "\2\0\147\10\2\0\65\10\2\0\11\10\52\0\15\10\1\0\3\10"+
    "\1\0\4\10\1\0\27\10\35\0\64\10\16\0\62\10\34\0\12\11"+
    "\30\0\6\10\3\0\1\10\1\0\2\10\1\0\12\11\34\10\12\0"+
    "\27\10\31\0\35\10\7\0\57\10\34\0\1\10\12\11\6\0\5\10"+
    "\1\0\12\10\12\11\5\10\1\0\51\10\27\0\3\10\1\0\10\10"+
    "\4\0\12\11\6\0\27\10\3\0\1\10\3\0\62\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10"+
    "\2\0\13\10\7\0\3\10\14\0\6\10\2\0\6\10\2\0\6\10"+
    "\11\0\7\10\1\0\7\10\1\0\53\10\1\0\16\10\6\0\163\10"+
    "\15\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10"+
    "\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\0\12\10"+
    "\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10"+
    "\164\0\5\10\1\0\207\10\23\0\12\11\7\0\32\10\6\0\32\10"+
    "\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\2\2\1\3\1\1\2\4\2\5\1\4"+
    "\1\6\1\7\1\10\1\11\1\4\1\12\2\13\1\12"+
    "\1\2\1\4\2\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\4\2\1\26\2\27"+
    "\3\26\2\27\2\26\1\30\1\31\2\32\1\33\2\32"+
    "\1\0\1\34\1\0\1\1\1\0\1\1\2\0\1\5"+
    "\2\35\1\5\1\36\1\37\2\13\1\0\10\37\2\40"+
    "\1\0\1\41\3\0\1\42\5\0\2\26\1\43\2\0"+
    "\2\26\6\0\1\44\2\0\1\45\1\0\2\36\10\37"+
    "\1\46\5\37\1\47\1\0\1\50\1\26\1\50\1\0"+
    "\1\26\1\43\1\51\1\52\1\53\2\0\14\37\1\54"+
    "\1\55\1\56\1\57\1\37\1\60\1\61\4\37\1\62"+
    "\4\37\1\0\6\37\1\63\5\37\1\64\1\0\3\37"+
    "\1\65\2\37\1\66\1\67\3\37\1\0\1\70\1\37"+
    "\1\71\3\37\1\72\1\73\1\37\1\0\1\74\5\37"+
    "\1\0\1\37\1\75\1\37\1\73\1\76\1\0\1\77"+
    "\1\100\1\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u0132\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u0561\0\u0594\0\u05c7\0\u04fb\0\u05fa\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u0132\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u08f7"+
    "\0\u092a\0\u0132\0\u0132\0\u095d\0\u0132\0\u0132\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0132\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0ef1\0\u0693\0\u0132\0\u06c6\0\u06f9\0\u0f24"+
    "\0\u0132\0\u075f\0\u0792\0\u0f57\0\u07c5\0\u0f8a\0\u0fbd\0\u0ff0"+
    "\0\u1023\0\u0891\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u0990"+
    "\0\u09c3\0\u1155\0\u1188\0\u0132\0\u11bb\0\u11ee\0\u0132\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u0c5a\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u0132\0\u1551\0\u1023\0\u1584\0\u0132\0\u15b7\0\u15ea\0\u0132"+
    "\0\u0132\0\u0132\0\u0132\0\u161d\0\u1254\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u0132\0\u0132\0\u0132\0\u18e7\0\u0c5a\0\u0c5a"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17"+
    "\0\u0c5a\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u0c5a\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u0c5a\0\u1e15\0\u1e48\0\u1e7b\0\u0c5a"+
    "\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u0c5a\0\u1f7a\0\u0c5a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u0c5a\0\u2046\0\u2079\0\u20ac\0\u0c5a\0\u20df"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u0c5a\0\u2244"+
    "\0\u0c5a\0\u0c5a\0\u2277\0\u0c5a\0\u0c5a\0\u22aa\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\23\1\24\1\25\2\23\1\26\35\23\1\27\4\23"+
    "\1\0\1\30\1\31\1\30\1\32\1\33\1\0\1\33"+
    "\1\34\1\0\1\30\1\31\3\0\1\30\1\0\1\33"+
    "\1\35\1\31\2\0\23\31\1\36\1\37\1\0\1\40"+
    "\1\41\5\0\1\25\1\30\1\31\1\30\1\32\1\33"+
    "\1\25\1\33\1\34\1\25\1\30\1\31\3\25\1\30"+
    "\1\25\1\33\1\35\1\31\2\25\23\31\1\36\1\37"+
    "\1\25\1\40\1\41\6\25\1\30\1\42\1\30\1\43"+
    "\1\44\1\25\1\33\1\45\1\25\1\30\1\42\3\25"+
    "\1\30\1\46\1\33\1\35\1\42\2\25\23\42\1\36"+
    "\1\37\1\25\1\40\1\47\57\25\1\50\32\25\1\51"+
    "\40\25\63\0\4\52\1\32\1\33\1\52\1\33\11\52"+
    "\1\33\27\52\1\53\2\52\1\54\12\52\1\32\1\33"+
    "\1\52\1\33\11\52\1\33\27\52\1\53\2\52\1\55"+
    "\6\52\22\56\1\35\26\56\1\57\1\37\1\60\1\61"+
    "\57\56\1\62\2\56\1\63\6\56\61\64\1\65\1\64"+
    "\17\66\1\67\43\66\4\70\1\71\1\72\1\70\1\73"+
    "\5\70\1\74\3\70\1\73\41\70\4\75\1\76\1\77"+
    "\1\75\1\100\6\75\1\101\2\75\1\100\41\75\4\52"+
    "\1\32\1\33\1\52\1\33\11\52\1\33\27\52\1\53"+
    "\2\52\1\102\6\52\4\103\1\104\1\105\1\103\1\105"+
    "\11\103\1\105\27\103\1\106\11\103\17\107\1\110\43\107"+
    "\14\23\2\0\2\23\1\0\35\23\1\111\4\23\14\0"+
    "\1\112\1\0\1\113\47\0\1\114\10\0\1\114\4\0"+
    "\1\115\2\114\1\116\1\114\23\0\2\114\10\0\16\23"+
    "\1\117\37\23\2\0\1\23\1\120\1\23\1\0\3\30"+
    "\6\0\2\30\3\0\1\30\3\0\1\30\2\0\23\30"+
    "\4\0\1\30\6\0\2\31\1\30\4\0\2\34\1\30"+
    "\1\31\3\0\1\30\3\0\1\31\2\0\23\31\4\0"+
    "\1\30\11\0\1\32\1\121\1\0\1\33\11\0\1\33"+
    "\45\0\1\32\1\33\1\0\1\33\11\0\1\33\42\0"+
    "\2\34\5\0\2\34\1\0\1\34\7\0\1\34\2\0"+
    "\23\34\13\0\1\30\1\122\1\30\4\0\1\123\1\0"+
    "\1\30\1\122\3\0\1\30\3\0\1\122\2\0\23\122"+
    "\4\0\1\30\6\0\2\42\1\30\4\0\2\45\1\30"+
    "\1\42\3\0\1\30\3\0\1\42\2\0\23\42\4\0"+
    "\1\30\11\0\1\32\1\124\1\0\1\33\11\0\1\33"+
    "\42\0\2\45\5\0\2\45\1\0\1\45\7\0\1\45"+
    "\2\0\23\45\13\0\1\125\1\126\1\127\4\0\1\126"+
    "\2\0\1\126\1\130\4\0\1\131\1\130\1\126\1\0"+
    "\1\130\1\132\1\133\2\126\1\134\1\135\2\126\1\136"+
    "\3\126\1\137\3\126\1\140\1\126\1\141\2\130\11\0"+
    "\1\30\1\142\1\30\4\0\1\143\1\0\1\30\1\142"+
    "\3\0\1\30\3\0\1\142\2\0\23\142\4\0\1\30"+
    "\5\0\52\144\1\145\10\144\22\146\1\145\40\146\61\147"+
    "\1\150\61\147\1\151\1\150\1\147\17\152\1\153\62\152"+
    "\1\154\43\152\15\155\1\156\51\155\1\157\1\160\1\155"+
    "\1\73\5\155\1\156\3\155\1\73\45\155\1\157\1\73"+
    "\1\155\1\73\5\155\1\156\3\155\1\73\56\155\1\161"+
    "\45\155\16\162\1\163\50\162\1\164\1\165\1\162\1\100"+
    "\6\162\1\163\2\162\1\100\45\162\1\164\1\100\1\162"+
    "\1\100\6\162\1\163\2\162\1\100\57\162\1\166\44\162"+
    "\5\0\1\167\55\0\17\170\1\171\62\170\1\172\43\170"+
    "\16\23\1\0\37\23\2\0\1\23\1\0\1\23\17\0"+
    "\1\173\61\0\1\174\47\0\1\114\10\0\1\114\5\0"+
    "\2\114\1\0\1\114\23\0\2\114\13\0\1\114\10\0"+
    "\1\114\4\0\1\115\2\114\1\0\1\114\23\0\2\114"+
    "\27\0\1\175\105\0\1\176\17\0\1\177\4\0\1\32"+
    "\3\33\11\0\1\33\42\0\2\122\1\30\4\0\2\123"+
    "\1\30\1\122\3\0\1\30\3\0\1\122\2\0\23\122"+
    "\4\0\1\30\6\0\2\123\5\0\2\123\1\0\1\123"+
    "\7\0\1\123\2\0\23\123\16\0\1\32\1\33\1\44"+
    "\1\33\11\0\1\33\42\0\1\125\1\200\1\201\60\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\23\126\13\0\1\202\1\0\1\130\10\0\1\130\5\0"+
    "\1\130\2\0\1\130\23\0\2\130\13\0\1\130\10\0"+
    "\1\130\5\0\1\130\2\0\1\130\23\0\2\130\13\0"+
    "\1\130\10\0\1\130\4\0\1\131\1\130\2\0\1\130"+
    "\23\0\2\130\11\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\1\126\1\203\1\126\1\204\6\126"+
    "\1\205\1\206\7\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\6\126\1\207\2\126\1\210"+
    "\5\126\1\211\3\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\6\126\1\212\13\126\1\213"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\15\126\1\214\5\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\4\126\1\215\16\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\12\126\1\216\10\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\14\126\1\217\6\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\5\126\1\220\15\126\13\0\2\142\1\30\4\0"+
    "\2\143\1\30\1\142\3\0\1\30\3\0\1\142\2\0"+
    "\23\142\4\0\1\30\6\0\2\143\5\0\2\143\1\0"+
    "\1\143\7\0\1\143\2\0\23\143\12\0\60\147\1\221"+
    "\1\150\1\147\15\152\1\222\1\152\1\154\43\152\15\155"+
    "\1\223\51\155\1\157\1\224\1\155\1\73\5\155\1\156"+
    "\3\155\1\73\45\155\1\157\1\73\1\72\1\73\5\155"+
    "\1\156\3\155\1\73\41\155\15\0\1\225\45\0\16\162"+
    "\1\226\50\162\1\164\1\227\1\162\1\100\6\162\1\163"+
    "\2\162\1\100\45\162\1\164\1\100\1\77\1\100\6\162"+
    "\1\163\2\162\1\100\56\162\1\230\1\226\44\162\6\0"+
    "\1\105\54\0\17\170\1\172\40\170\1\231\2\170\17\0"+
    "\1\232\62\0\1\233\103\0\1\234\23\0\1\125\62\0"+
    "\1\202\62\0\1\202\1\235\61\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\2\126\1\236\20\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\5\126\1\237\15\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\5\126\1\240\15\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\4\126\1\241\16\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\242\2\0\7\126\1\242\13\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\1\243\22\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\3\126\1\244\17\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\2\126\1\245\20\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\1\126\1\246\21\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\1\126\1\247\21\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\14\126\1\250\6\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\14\126\1\251\6\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\16\126\1\252\4\126\12\0"+
    "\15\152\1\253\1\152\1\153\43\152\4\155\1\157\3\73"+
    "\5\155\1\156\3\155\1\73\41\155\15\162\1\254\1\226"+
    "\50\162\1\164\3\100\6\162\1\163\2\162\1\100\41\162"+
    "\42\0\1\255\21\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\3\126\1\256\17\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\14\126"+
    "\1\257\6\126\13\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\13\126\1\260\7\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\3\126"+
    "\1\261\17\126\13\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\1\262\3\126\1\263\15\126\1\264"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\1\126\1\265\21\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\1\126\1\266\21\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\11\126\1\267\11\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\16\126\1\270\4\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\11\126\1\271\11\126\13\0\2\126\1\0\2\272"+
    "\1\0\1\272\2\126\1\0\1\126\5\0\1\272\1\0"+
    "\1\126\2\0\23\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\1\126\1\273\21\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\1\126\1\274\21\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\4\126\1\275\16\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\2\126\1\276\20\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\1\126\1\277\11\126\1\300"+
    "\7\126\13\0\2\126\5\0\2\126\1\0\1\126\7\0"+
    "\1\126\2\0\22\126\1\301\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\5\126\1\302\15\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\4\126\1\303\16\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\6\126\1\304\14\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\21\126\1\305\1\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\13\126\1\306\7\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\307"+
    "\2\0\7\126\1\307\13\126\12\0\20\272\1\310\42\272"+
    "\1\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\6\126\1\311\14\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\20\126\1\312\2\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\5\126\1\313\15\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\12\126\1\314\10\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\2\126\1\315\20\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\4\126\1\316\16\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\16\126\1\317\4\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\22\126\1\320\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\321\2\0"+
    "\7\126\1\321\13\126\13\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\322\2\0\7\126\1\322\13\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\16\126\1\323\4\126\12\0\20\272\1\310\6\272\1\324"+
    "\33\272\1\0\2\126\5\0\2\126\1\0\1\126\7\0"+
    "\1\325\2\0\7\126\1\325\13\126\13\0\2\126\5\0"+
    "\2\126\1\0\1\126\7\0\1\126\2\0\2\126\1\326"+
    "\20\126\13\0\2\126\5\0\2\126\1\0\1\126\7\0"+
    "\1\126\2\0\6\126\1\327\14\126\13\0\2\126\5\0"+
    "\2\126\1\0\1\126\7\0\1\126\2\0\3\126\1\330"+
    "\17\126\13\0\2\126\5\0\2\126\1\0\1\126\7\0"+
    "\1\126\2\0\3\126\1\331\17\126\13\0\2\126\5\0"+
    "\2\126\1\0\1\126\7\0\1\126\2\0\1\126\1\332"+
    "\21\126\13\0\2\126\5\0\2\126\1\0\1\126\7\0"+
    "\1\126\2\0\1\333\22\126\13\0\2\126\5\0\2\126"+
    "\1\0\1\126\7\0\1\126\2\0\1\126\1\334\21\126"+
    "\13\0\2\126\5\0\2\126\1\0\1\126\7\0\1\126"+
    "\2\0\4\126\1\335\16\126\12\0\20\272\1\310\13\272"+
    "\1\336\26\272\1\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\12\126\1\337\10\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\4\126"+
    "\1\340\16\126\13\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\2\126\1\341\20\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\20\126"+
    "\1\342\2\126\13\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\4\126\1\343\16\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\3\126"+
    "\1\344\17\126\12\0\20\272\1\310\2\272\1\345\11\272"+
    "\1\345\25\272\1\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\5\126\1\346\15\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\12\126"+
    "\1\347\10\126\13\0\2\126\5\0\2\126\1\0\1\126"+
    "\7\0\1\126\2\0\2\126\1\350\20\126\13\0\2\126"+
    "\5\0\2\126\1\0\1\126\7\0\1\126\2\0\22\126"+
    "\1\351\13\0\2\126\5\0\2\126\1\0\1\126\7\0"+
    "\1\126\2\0\1\126\1\352\21\126\12\0\20\272\1\310"+
    "\21\272\1\353\20\272\1\0\2\126\5\0\2\126\1\0"+
    "\1\126\7\0\1\126\2\0\6\126\1\354\14\126\13\0"+
    "\2\126\5\0\2\126\1\0\1\126\7\0\1\126\2\0"+
    "\12\126\1\355\10\126\12\0\20\272\1\310\17\272\1\356"+
    "\42\272\1\310\21\272\1\357\20\272";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8925];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\10\13\0\2\1\1\11\7\1\4\11\11\1"+
    "\12\11\16\1\2\11\1\1\2\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\11\2\0\10\1\1\0\12\1"+
    "\1\0\1\11\3\0\1\11\5\0\3\1\2\0\2\1"+
    "\6\0\1\11\2\0\1\11\1\0\20\1\1\11\1\0"+
    "\2\1\1\11\1\0\1\1\4\11\2\0\15\1\3\11"+
    "\14\1\1\0\15\1\1\0\13\1\1\0\11\1\1\0"+
    "\6\1\1\0\5\1\1\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int whitespaceEndPosition;
    private int directiveParBalance = 0;
    private String phpConditionText = "";
    private String phpParameterExpressionText = "";
    private FileObject currentFile;
    private String fakePhpEmbeddingText = "";
    private int lastEmbeddedPos = -1;

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createConditionSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = phpConditionText;
        phpConditionText = "";
        return symbol;
    }


    private Symbol createPhpParameterExpression(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = phpParameterExpressionText;
        phpParameterExpressionText = "";
        return symbol;
    }


    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    private void error(String message) {
        System.out.println("Error at line " + (yyline + 1) + ", column " + (yycolumn + 1) + " : " + message);
    }

    protected void addBladePhpInline() {
        //TODO may think of an include with php
        //we will have to think of the offset
        int start = getTokenStartPosition();
        if (start > 1) {
            int offsetEmbed;
            if (lastEmbeddedPos < 0) {
                offsetEmbed = start - 2;
            } else {
                offsetEmbed = start - 2 - lastEmbeddedPos;
            }
            String emptyText = "";
            if (offsetEmbed > 0) {
                emptyText = new String(new char[offsetEmbed]).replace("\0", " ");
            }
            fakePhpEmbeddingText += emptyText + yytext().replace("@php", "<?php ").replace("@endphp", "    ?>");
        } else {
            String phpText = yytext().replace("@php", "<?  ").replace("@endphp", "////\n?>");
            if (phpText.length() == yytext().length()) {
                fakePhpEmbeddingText += phpText;
            }
        }

        lastEmbeddedPos = start + getTokenLength();
    }

    protected void addPhpStatement() {
        int start = getTokenStartPosition();
        int offsetEmbed;
        if (lastEmbeddedPos < 0) {
            offsetEmbed = start;
        } else {
            offsetEmbed = start - lastEmbeddedPos;
        }
        String emptyText = "";
        if (offsetEmbed > 0) {
            emptyText = new String(new char[offsetEmbed]).replace("\0", " ");
        }
        fakePhpEmbeddingText += emptyText + yytext();
        lastEmbeddedPos = start + getTokenLength();
    }
    
    protected void addEchoStatement(){
        int start = getTokenStartPosition();
        int offsetEmbed;
        //we assume that previous we had {{ or {!!
        if (lastEmbeddedPos < 0) {
            offsetEmbed = start - 3;
        } else {
            offsetEmbed = start - 3 - lastEmbeddedPos;
        }
        String emptyText;
        if (offsetEmbed > 0) {
            emptyText = new String(new char[offsetEmbed]).replace("\0", " ");
            fakePhpEmbeddingText += emptyText + "<?=" + yytext() + "?>";
            lastEmbeddedPos = start + getTokenLength() + 2;
        }
        
    }

    public String getFakePhpEmbeddingText() {
        return fakePhpEmbeddingText;
    }

    public void setCurentFile(FileObject file) {
        currentFile = file;
    }

    public PHPParseResult getPhpParserResult() {
        ParsingUtils parsingUtils = new ParsingUtils();
        if (fakePhpEmbeddingText.length() > 0) {
            parsingUtils.parsePhpText(fakePhpEmbeddingText);
        } else {
            parsingUtils.parsePhpText("<?php\n");
        }

        return parsingUtils.getParserResult();
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTBladeScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTBladeScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1802) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
//    if (!zzEOFDone) {
//      zzEOFDone = true;
//      yyclose();
//    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { if (phpParameterExpressionText.trim().length() > 0){
            yypushback(1);
            return createPhpParameterExpression(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
        }
        pushState(ST_BLADE_PARAMETER);
        return createSymbol(ASTBladeSymbols.T_COMMA);
          }
        case 66: break;
        case 15: 
          { directiveParBalance--;
    phpConditionText += yytext();
    if (directiveParBalance <= 0){
        directiveParBalance = 0;
  		 yybegin(YYINITIAL);
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_CONDITION_EXPRESSION);
    }
          }
        case 67: break;
        case 53: 
          { pushState(ST_LOOK_FOR_DIRECTIVE_ARGUMENTS);
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_SWITCH);
          }
        case 68: break;
        case 63: 
          { popState();
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDSECTION);
          }
        case 69: break;
        case 28: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_OPEN_ECHO);
          }
        case 70: break;
        case 62: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_OVERWRITE);
          }
        case 71: break;
        case 46: 
          { String yytext = yytext();
    yypushback(3);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_PHP_ECHO);
          }
        case 72: break;
        case 4: 
          { return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 73: break;
        case 24: 
          { directiveParBalance--;
    phpConditionText += yytext();
    if (directiveParBalance <= 0){
        directiveParBalance = 0;
  		 yypushback(1);
         popState();
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
    }
          }
        case 74: break;
        case 60: 
          { pushState(ST_PHP_LOOP_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_FOREACH);
          }
        case 75: break;
        case 50: 
          { //pop the state
        popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_DIRECTIVE);
          }
        case 76: break;
        case 56: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_APPEND);
          }
        case 77: break;
        case 2: 
          { // do nothing
          }
        case 78: break;
        case 34: 
          { //yypushback(2);
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_PHP);
          }
        case 79: break;
        case 3: 
          { pushState(ST_BLADE_DIRECTIVE);
    if (yylength() > 0){
        yypushback(1);
        return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
    }
          }
        case 80: break;
        case 55: 
          { pushState(ST_PHP_CONDITION_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ELSEIF);
          }
        case 81: break;
        case 38: 
          { pushState(ST_PHP_CONDITION_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_IF);
          }
        case 82: break;
        case 21: 
          { String yytext = yytext();
    	directiveParBalance--;
    	if (directiveParBalance <= 0){
            directiveParBalance =0;
    		if (phpParameterExpressionText.length() > 0){
    			directiveParBalance++;
    			yypushback(1);
    			popState();
    			return createPhpParameterExpression(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
    		} else {
    			yybegin(YYINITIAL);
            	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
            }
    	}
          }
        case 83: break;
        case 19: 
          { String yytext = yytext();
    	directiveParBalance--;
    	if (directiveParBalance <= 0){
            directiveParBalance = 0;
            //exit out of ST_BLADE_INCLUDE_ARGS
            if (phpParameterExpressionText.trim().length() > 0){
                directiveParBalance++;
                yypushback(1);
                return createPhpParameterExpression(ASTBladeSymbols.T_PHP_PARAMETER_EXPRESSION);
            }
    		yybegin(YYINITIAL);
    		
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 84: break;
        case 58: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_EXTENDS);
          }
        case 85: break;
        case 20: 
          { //skipping the parameter
    	directiveParBalance++;
    	//return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 86: break;
        case 35: 
          { String yytext = yytext();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_CLOSE_ECHO);
          }
        case 87: break;
        case 59: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_INCLUDE);
          }
        case 88: break;
        case 61: 
          { popState();
    	return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDSWITCH);
          }
        case 89: break;
        case 25: 
          { yybegin(YYINITIAL);
   yypushback(1);
   return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 90: break;
        case 12: 
          { String yytext = yytext();
	int debug = 1;
	phpConditionText += yytext();
          }
        case 91: break;
        case 49: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_SHOW);
          }
        case 92: break;
        case 30: 
          { String yytext = yytext();
    	popState();
    	return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 93: break;
        case 64: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDFOREACH);
          }
        case 94: break;
        case 65: 
          { popState();
        addBladePhpInline();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_INLINE_PHP);
          }
        case 95: break;
        case 41: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 96: break;
        case 39: 
          { //yypushback(2);
    addPhpStatement();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_PHP);
          }
        case 97: break;
        case 33: 
          { popState(); 
   return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 98: break;
        case 1: 
          { return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 99: break;
        case 37: 
          { yypushback(3);
    pushState(ST_PHP);
          }
        case 100: break;
        case 5: 
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 101: break;
        case 32: 
          { //to be refactored
        return createFullSymbol(ASTBladeSymbols.T_VARIABLE);
          }
        case 102: break;
        case 43: 
          { yypushback(4);
    pushState(ST_HTML_COMMENT);
    //return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 103: break;
        case 16: 
          { phpParameterExpressionText += yytext();
          }
        case 104: break;
        case 6: 
          { yypushback(1);pushState(ST_STRING_SQUOTE);
          }
        case 105: break;
        case 36: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_OPEN_ECHO);
          }
        case 106: break;
        case 52: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
	    return createFullSymbol(ASTBladeSymbols.T_BLADE_YIELD);
          }
        case 107: break;
        case 51: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDIF);
          }
        case 108: break;
        case 17: 
          { directiveParBalance++;
        if (phpParameterExpressionText.trim().length() > 0){
            phpParameterExpressionText += yytext();
        }
        if (directiveParBalance > 1) {
            pushState(ST_BLADE_PARAMETER);
        } else {
    	   return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
        }
          }
        case 109: break;
        case 45: 
          { popState();
    return createFullSymbol(ASTBladeSymbols.T_BLADE_COMMENT);
          }
        case 110: break;
        case 7: 
          { directiveParBalance++;
    	return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 111: break;
        case 11: 
          { String yytext = yytext();
       popState();
       return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 112: break;
        case 13: 
          { directiveParBalance++;
    phpConditionText += yytext();
          }
        case 113: break;
        case 44: 
          { pushState(ST_PHP_LOOP_EXPRESSION);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_FOR);
          }
        case 114: break;
        case 8: 
          { yypushback(1);pushState(ST_STRING_DBQUOTE);
          }
        case 115: break;
        case 57: 
          { pushState(ST_BLADE_INCLUDE_ARGS);
        return createFullSymbol(ASTBladeSymbols.T_BLADE_SECTION);
          }
        case 116: break;
        case 54: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_ENDFOR);
          }
        case 117: break;
        case 23: 
          { String yytext = yytext();
    popState();
    return createFullSymbol(ASTBladeSymbols.T_INLINE_HTML);
          }
        case 118: break;
        case 47: 
          { yypushback(5);
    pushState(ST_PHP);
          }
        case 119: break;
        case 42: 
          { yypushback(4);
    pushState(ST_COMMENT);
          }
        case 120: break;
        case 9: 
          { directiveParBalance--;
    	if (directiveParBalance <= 0){
            directiveParBalance = 0;
    		yybegin(YYINITIAL);
    	}
    	return createSymbol(ASTBladeSymbols.T_CLOSE_PARENTHESE);
          }
        case 121: break;
        case 48: 
          { popState();
        return createFullSymbol(ASTBladeSymbols.T_BLADE_STOP);
          }
        case 122: break;
        case 27: 
          { //TO TEST
    //directiveParBalance++;
    popState();
    yypushback(1);
    pushState(ST_BLADE_PARAMETER_EXPRESSION);
    return createSymbol(ASTBladeSymbols.T_OPEN_PARENTHESE);
          }
        case 123: break;
        case 14: 
          { directiveParBalance--;
    phpConditionText += yytext();
    if (directiveParBalance <= 0){
        directiveParBalance = 0;
  		 yybegin(YYINITIAL);
   		 return createConditionSymbol(ASTBladeSymbols.T_PHP_LOOP_EXPRESSION);
    }
          }
        case 124: break;
        case 31: 
          { String yytext = yytext();
       if (BladeSyntax.CONDITIONAL_DIRECTIVES.contains(yytext)) {
             pushState(ST_PHP_CONDITION_EXPRESSION);
             return createFullSymbol(ASTBladeSymbols.T_BLADE_CONDITION_OPEN_TAG);
       }
       pushState(ST_LOOK_FOR_DIRECTIVE_ARGUMENTS);
       return createFullSymbol(ASTBladeSymbols.T_BLADE_DIRECTIVE);
          }
        case 125: break;
        case 40: 
          { String yytext = yytext();
    yypushback(2);
    return createFullSymbol(ASTBladeSymbols.T_BLADE_PHP_ECHO);
          }
        case 126: break;
        case 22: 
          { //no break;
          }
        case 127: break;
        case 10: 
          { //to be refactored
        return createFullSymbol(ASTBladeSymbols.T_STRING);
          }
        case 128: break;
        case 29: 
          { return createFullSymbol(ASTBladeSymbols.T_VARIABLE);
          }
        case 129: break;
        case 26: 
          { 
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(ASTBladeSymbols.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
