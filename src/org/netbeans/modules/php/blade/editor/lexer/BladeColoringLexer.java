/* The following code was generated by JFlex 1.4.3 on 8/21/22, 3:42 PM */

   /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.blade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.php.blade.editor.common.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/21/22, 3:42 PM from the specification file
 * <tt>BladeColoringLexer.flex</tt>
 */
public class BladeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP = 4;
  public static final int ST_PHP_IF_EXPR = 34;
  public static final int ST_PHP_LOOKING_FOR_LOOP_EXPR = 38;
  public static final int ST_HTML = 2;
  public static final int ST_LOOKING_FOR_SECOND_PARAMETER = 28;
  public static final int ST_PHP_LOOKING_FOR_DIRECTIVE_PARAM = 26;
  public static final int ST_CLOSE_BLADE_PHP = 22;
  public static final int ST_DIRECTIVE = 16;
  public static final int ST_BLADE_ECHO = 12;
  public static final int ST_AFTER_DIRECTIVE_ARG = 40;
  public static final int ST_BLADE_ECHO_ESCAPED = 14;
  public static final int ST_COMMENT = 18;
  public static final int ST_BLADE_ARGUMENT = 30;
  public static final int ST_PHP_ECHO = 6;
  public static final int ST_BLADE_PHP = 10;
  public static final int ST_PHP_LOOKING_FOR_IF_EXPR = 36;
  public static final int ST_PHP_LOOP_EXPR = 32;
  public static final int ST_HIGHLIGHTING_ERROR = 20;
  public static final int YYINITIAL = 0;
  public static final int ST_INLINE_PHP = 8;
  public static final int ST_PHP_LOOKING_FOR_DIRECTIVE_ARG = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     0,  0,  7,  7,  8,  8,  0,  0,  9,  9,  0,  0, 10, 10, 11, 11, 
    12, 12, 12, 12, 13, 13, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\51\1\6\1\46\1\52"+
    "\1\0\1\25\1\0\1\47\1\44\1\45\1\62\1\56\1\50\1\7"+
    "\1\57\1\61\12\55\1\0\1\23\1\13\1\31\1\17\1\14\1\12"+
    "\1\40\1\54\1\35\1\22\1\20\1\43\1\54\1\16\1\33\2\54"+
    "\1\30\1\27\1\21\1\37\1\15\1\54\1\41\1\34\1\36\1\42"+
    "\2\54\1\26\1\32\1\54\4\0\1\60\1\0\1\40\1\54\1\35"+
    "\1\53\1\20\1\43\1\54\1\16\1\33\2\54\1\30\1\27\1\21"+
    "\1\37\1\15\1\54\1\41\1\34\1\36\1\42\2\54\1\26\1\32"+
    "\1\54\1\4\1\24\1\5\1\0\53\10\1\10\12\10\1\10\4\10"+
    "\1\10\5\10\27\10\1\10\37\10\1\10\10\10\u01c2\10\4\0\14\10"+
    "\16\0\5\10\7\0\1\10\1\0\1\10\201\0\5\10\1\0\2\10"+
    "\2\0\4\10\1\0\1\10\6\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\0\24\10\1\0\123\10\1\0\213\10\10\0\246\10\1\0\46\10"+
    "\2\0\1\10\6\0\51\10\107\0\33\10\4\0\4\10\55\0\53\10"+
    "\25\0\12\11\4\0\2\10\1\0\143\10\1\0\1\10\17\0\2\10"+
    "\7\0\2\10\12\11\3\10\2\0\1\10\20\0\1\10\1\0\36\10"+
    "\35\0\131\10\13\0\1\10\16\0\12\11\41\10\11\0\2\10\4\0"+
    "\1\10\5\0\26\10\4\0\1\10\11\0\1\10\3\0\1\10\27\0"+
    "\31\10\7\0\13\10\65\0\25\10\1\0\22\10\74\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\4\0\12\11\1\0\20\10\4\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0"+
    "\4\10\3\0\1\10\20\0\1\10\15\0\2\10\1\0\3\10\4\0"+
    "\12\11\2\10\12\0\1\10\10\0\6\10\4\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\37\0\4\10"+
    "\1\0\1\10\7\0\12\11\2\0\3\10\20\0\11\10\1\0\3\10"+
    "\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10"+
    "\22\0\1\10\17\0\2\10\4\0\12\11\11\0\1\10\13\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\11\1\0\1\10"+
    "\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10"+
    "\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10"+
    "\26\0\1\10\25\0\12\11\25\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\20\10\3\0\1\10\32\0\3\10\5\0\2\10\4\0\12\11"+
    "\20\0\1\10\4\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\3\0\1\10\40\0\1\10\1\0\2\10\4\0\12\11"+
    "\1\0\2\10\21\0\11\10\1\0\3\10\1\0\51\10\2\0\1\10"+
    "\20\0\1\10\5\0\3\10\10\0\3\10\4\0\12\11\12\0\6\10"+
    "\5\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\37\0\12\11\21\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11"+
    "\47\0\2\10\1\0\1\10\1\0\5\10\1\0\30\10\1\0\1\10"+
    "\1\0\12\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10"+
    "\11\0\12\11\2\0\4\10\40\0\1\10\37\0\12\11\26\0\10\10"+
    "\1\0\44\10\33\0\5\10\163\0\53\10\24\0\1\10\12\11\6\0"+
    "\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0"+
    "\15\10\14\0\1\10\1\0\12\11\6\0\46\10\1\0\1\10\5\0"+
    "\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0"+
    "\71\10\1\0\4\10\2\0\103\10\45\0\20\10\20\0\126\10\2\0"+
    "\6\10\3\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\6\0"+
    "\10\10\7\0\15\10\1\0\4\10\16\0\22\10\16\0\22\10\16\0"+
    "\15\10\1\0\3\10\17\0\64\10\43\0\1\10\4\0\1\10\3\0"+
    "\12\11\46\0\12\11\6\0\131\10\7\0\5\10\2\0\42\10\1\0"+
    "\1\10\5\0\106\10\12\0\37\10\47\0\12\11\36\10\2\0\5\10"+
    "\13\0\54\10\4\0\32\10\6\0\12\11\46\0\27\10\11\0\65\10"+
    "\53\0\12\11\6\0\12\11\15\0\1\10\135\0\57\10\21\0\7\10"+
    "\4\0\12\11\51\0\36\10\15\0\2\10\12\11\54\10\32\0\44\10"+
    "\34\0\12\11\3\0\3\10\12\11\44\10\2\0\11\10\7\0\53\10"+
    "\2\0\3\10\51\0\4\10\1\0\6\10\1\0\2\10\3\0\1\10"+
    "\5\0\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10"+
    "\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10"+
    "\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10"+
    "\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10"+
    "\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0\1\10"+
    "\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10"+
    "\4\0\1\10\64\0\2\10\u0a7b\0\57\10\1\0\57\10\1\0\205\10"+
    "\6\0\4\10\3\0\2\10\14\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\70\10\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\120\0\1\10\u01d5\0\2\10\52\0\5\10\5\0\2\10"+
    "\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10\5\0\53\10"+
    "\1\0\136\10\21\0\40\10\60\0\20\10\u0200\0\u19c0\10\100\0\u51fd\10"+
    "\3\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10"+
    "\24\0\57\10\20\0\37\10\2\0\106\10\61\0\11\10\2\0\147\10"+
    "\2\0\65\10\2\0\11\10\52\0\15\10\1\0\3\10\1\0\4\10"+
    "\1\0\27\10\35\0\64\10\16\0\62\10\34\0\12\11\30\0\6\10"+
    "\3\0\1\10\1\0\2\10\1\0\12\11\34\10\12\0\27\10\31\0"+
    "\35\10\7\0\57\10\34\0\1\10\12\11\6\0\5\10\1\0\12\10"+
    "\12\11\5\10\1\0\51\10\27\0\3\10\1\0\10\10\4\0\12\11"+
    "\6\0\27\10\3\0\1\10\3\0\62\10\1\0\1\10\3\0\2\10"+
    "\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10\2\0\13\10"+
    "\7\0\3\10\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10"+
    "\1\0\7\10\1\0\53\10\1\0\16\10\6\0\163\10\15\0\12\11"+
    "\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10"+
    "\46\0\7\10\14\0\5\10\5\0\1\10\1\0\12\10\1\0\15\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10"+
    "\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10\164\0\5\10"+
    "\1\0\207\10\23\0\12\11\7\0\32\10\6\0\32\10\13\0\131\10"+
    "\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\2\3\3\4\1\1\2\4\1\5"+
    "\1\0\1\5\2\0\1\5\1\0\2\5\1\6\2\7"+
    "\2\5\1\6\2\7\1\5\2\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\12\1\32\1\33\1\34\1\0\1\35\1\0\1\10"+
    "\1\36\10\37\1\10\1\36\2\0\1\40\2\0\1\41"+
    "\1\0\1\42\4\0\1\43\6\0\1\44\1\0\1\45"+
    "\1\0\1\46\1\0\1\47\2\37\1\50\1\0\6\37"+
    "\1\51\3\37\1\36\2\0\1\52\1\53\1\54\2\0"+
    "\2\55\1\0\1\56\2\0\1\57\1\60\1\37\1\50"+
    "\10\37\1\61\4\0\1\62\1\0\1\63\6\37\1\64"+
    "\1\65\3\37\1\66\1\37\1\67\3\0\1\70\2\37"+
    "\1\71\4\37\1\72\3\37\3\0\1\73\2\37\1\74"+
    "\1\37\1\75\3\37\1\76\1\0\1\77\1\100\2\37"+
    "\1\101\1\102\1\103\1\104\1\77\1\105\4\37\1\106"+
    "\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0330\0\u0396\0\0\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0561"+
    "\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u05fa\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u06c6\0\u072c\0\u075f\0\u0792\0\0\0\u07c5\0\0"+
    "\0\u07f8\0\u082b\0\0\0\0\0\0\0\0\0\0\0\0"+
    "\0\0\0\0\0\u085e\0\u0891\0\0\0\0\0\u08c4\0\0"+
    "\0\0\0\u08f7\0\0\0\0\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u042f\0\u0462"+
    "\0\u0cc0\0\0\0\u0cf3\0\0\0\u0d26\0\u0d59\0\u05c7\0\u0d8c"+
    "\0\u0dbf\0\u0693\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u085e\0\0"+
    "\0\u0891\0\0\0\u08f7\0\0\0\u0ebe\0\0\0\u0ef1\0\u0f24"+
    "\0\0\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u0ac2\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\0"+
    "\0\0\0\0\0\u11ee\0\u1221\0\u0dbf\0\0\0\u1254\0\0"+
    "\0\u1287\0\u12ba\0\0\0\u0ac2\0\u12ed\0\u0f57\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\0\0\u15b7\0\0\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u0ac2\0\u174f\0\u1782"+
    "\0\u17b5\0\u0ac2\0\u17e8\0\0\0\u181b\0\u184e\0\u1881\0\0"+
    "\0\u18b4\0\u18e7\0\u0ac2\0\u191a\0\u194d\0\u1980\0\u19b3\0\u0ac2"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u0ac2\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u0ac2\0\u1be4\0\u1c17\0\u1c4a\0\u181b"+
    "\0\u1c7d\0\u1cb0\0\0\0\u1ce3\0\u1d16\0\u0ac2\0\u0ac2\0\u0ac2"+
    "\0\u0ac2\0\0\0\0\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u0ac2"+
    "\0\u0ac2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\0\1\20\1\21\1\22\1\23\1\24\1\25\4\20"+
    "\1\26\1\27\10\20\1\25\17\20\2\25\3\20\1\21"+
    "\4\20\1\25\2\20\1\30\1\31\3\32\1\33\10\32"+
    "\1\34\46\32\14\35\1\36\46\35\3\37\1\40\6\37"+
    "\1\41\50\37\1\42\1\43\1\44\1\45\1\42\1\46"+
    "\43\42\1\43\11\42\1\47\1\50\1\51\1\52\2\47"+
    "\1\53\42\47\1\50\11\47\7\54\1\55\53\54\1\56"+
    "\3\57\45\56\1\57\11\56\1\60\1\61\2\62\13\60"+
    "\1\63\24\60\1\64\1\65\1\63\2\60\1\61\11\60"+
    "\44\66\1\67\1\70\15\66\45\71\1\72\1\73\1\74"+
    "\1\75\12\71\1\76\3\77\40\76\1\100\1\101\3\76"+
    "\1\77\11\76\1\60\3\102\40\60\1\103\4\60\1\102"+
    "\11\60\1\104\3\105\45\104\1\105\11\104\4\20\2\0"+
    "\4\20\1\0\1\106\10\20\1\0\17\20\2\0\10\20"+
    "\1\0\2\20\2\0\1\20\3\21\2\0\4\20\1\0"+
    "\1\106\10\20\1\0\17\20\2\0\3\20\1\21\4\20"+
    "\1\0\2\20\2\0\1\20\2\21\1\23\2\0\4\20"+
    "\1\0\1\106\10\20\1\0\17\20\2\0\3\20\1\21"+
    "\4\20\1\0\2\20\6\0\1\107\1\0\1\110\55\0"+
    "\3\111\1\112\3\0\1\113\4\0\1\114\1\115\1\0"+
    "\1\116\2\115\3\0\3\115\1\0\1\117\1\120\1\121"+
    "\6\115\1\122\1\112\1\0\2\112\1\0\1\123\1\112"+
    "\1\124\1\115\2\125\1\112\1\113\2\0\13\20\1\0"+
    "\1\126\10\20\1\0\35\20\62\0\1\127\61\0\1\56"+
    "\1\130\14\33\1\131\62\33\1\131\2\33\1\132\43\33"+
    "\14\35\1\133\62\35\1\133\2\35\1\134\43\35\12\40"+
    "\1\135\62\40\1\135\5\40\1\136\42\40\5\137\1\140"+
    "\56\137\3\43\1\137\1\140\43\137\1\43\12\137\2\43"+
    "\1\45\1\137\1\140\43\137\1\43\16\137\1\141\55\137"+
    "\6\142\1\143\55\142\3\50\2\142\1\143\42\142\1\50"+
    "\12\142\2\50\1\52\2\142\1\143\42\142\1\50\17\142"+
    "\1\144\54\142\7\54\1\145\62\54\1\146\53\54\1\0"+
    "\3\57\45\0\1\57\12\0\3\61\45\0\1\61\12\0"+
    "\1\61\2\62\45\0\1\61\11\0\46\147\1\150\14\147"+
    "\47\151\1\152\13\151\1\0\3\77\45\0\1\77\12\0"+
    "\3\153\40\0\1\154\4\0\1\153\12\0\3\105\45\0"+
    "\1\105\11\0\13\20\2\0\10\20\1\0\35\20\7\0"+
    "\1\155\61\0\1\156\55\0\3\111\45\0\1\111\15\0"+
    "\1\112\37\0\1\112\1\0\2\112\2\0\2\112\3\0"+
    "\1\112\13\0\2\113\3\0\2\113\1\0\3\113\3\0"+
    "\3\113\1\0\12\113\7\0\3\113\2\0\1\113\12\0"+
    "\2\113\3\0\1\115\1\157\1\0\3\115\3\0\3\115"+
    "\1\0\6\115\1\160\3\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\3\115\3\0\3\115\1\0\12\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\1\115\1\163\1\115\3\0\1\164\1\115\1\165"+
    "\1\0\6\115\1\166\3\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\3\115\3\0\3\115\1\0\1\115\1\167\10\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\1\115\1\170\1\115\3\0\3\115"+
    "\1\0\11\115\1\171\1\0\1\161\5\0\3\115\1\125"+
    "\1\162\1\113\12\0\2\113\3\0\2\115\1\0\1\172"+
    "\2\115\3\0\3\115\1\0\4\115\1\173\5\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\5\115"+
    "\1\174\4\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\3\0\3\111\1\112\37\0\1\112\1\0\2\112"+
    "\1\0\1\123\2\112\3\0\1\112\7\0\1\112\3\0"+
    "\2\113\3\0\2\115\1\0\3\115\3\0\3\115\1\0"+
    "\12\115\1\112\1\161\2\112\2\0\1\112\1\124\2\115"+
    "\1\125\1\175\1\113\17\0\2\125\1\0\3\125\3\0"+
    "\3\125\1\0\12\125\1\0\1\161\5\0\4\125\1\162"+
    "\20\0\1\176\10\0\1\177\2\0\1\200\31\0\14\33"+
    "\1\131\2\33\1\201\43\33\14\35\1\133\2\35\1\202"+
    "\43\35\12\40\1\135\5\40\1\203\54\40\1\135\6\40"+
    "\1\204\41\40\5\137\1\205\55\137\5\0\1\206\55\0"+
    "\6\142\1\207\61\142\1\210\1\207\54\142\7\54\1\211"+
    "\60\54\1\212\1\54\1\211\53\54\7\0\1\213\63\0"+
    "\2\113\3\0\1\214\1\115\1\0\3\115\3\0\3\115"+
    "\1\0\12\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\7\115\1\215\2\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\11\0\1\216\5\0\2\216"+
    "\1\0\3\216\3\0\3\216\1\0\12\216\7\0\6\216"+
    "\12\0\2\113\3\0\2\115\1\0\2\115\1\217\3\0"+
    "\3\115\1\0\12\115\1\0\1\161\5\0\1\217\2\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\3\115\3\0\3\115\1\0\4\115\1\220\5\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\2\115"+
    "\1\221\7\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\3\115\1\222\6\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\1\223\2\115\3\0\3\115\1\0\12\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\3\115"+
    "\1\224\6\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\3\115\1\225\6\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\3\115\3\0\3\115\1\0\5\115\1\226\4\115"+
    "\1\0\1\161\5\0\3\115\1\125\1\162\1\113\12\0"+
    "\2\113\3\0\2\115\1\0\3\115\3\0\3\115\1\0"+
    "\7\115\1\227\2\115\1\0\1\161\5\0\3\115\1\125"+
    "\1\162\1\113\6\0\1\112\2\0\1\216\5\0\2\216"+
    "\1\0\3\216\3\0\3\216\1\0\12\216\1\112\1\0"+
    "\2\112\2\0\1\112\1\175\3\216\1\175\1\216\20\0"+
    "\1\230\73\0\1\231\33\0\12\40\1\135\6\40\1\232"+
    "\53\40\1\135\7\40\1\233\30\40\1\233\7\40\5\142"+
    "\1\234\1\207\54\142\5\54\1\235\1\54\1\211\60\54"+
    "\1\236\1\54\1\145\53\54\10\0\2\113\3\0\2\115"+
    "\1\0\1\237\2\115\3\0\3\115\1\0\12\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\1\240\1\115\1\0\3\115\3\0\3\115\1\0"+
    "\1\115\1\241\1\242\6\115\1\243\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\1\244\2\115\3\0\3\115\1\0\12\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\1\245\2\115\3\0\3\115\1\0"+
    "\12\115\1\0\1\161\5\0\3\115\1\125\1\162\1\113"+
    "\12\0\2\113\3\0\1\115\1\246\1\0\3\115\3\0"+
    "\3\115\1\0\12\115\1\0\1\161\5\0\3\115\1\125"+
    "\1\162\1\113\12\0\2\113\3\0\2\115\1\0\3\115"+
    "\3\0\2\115\1\247\1\0\12\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\3\115\3\0\2\115\1\250\1\0\12\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\4\115"+
    "\1\251\5\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\1\252\1\115\1\0\3\115"+
    "\3\0\3\115\1\0\12\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\1\253\2\115\3\0\3\115\1\0\12\115\1\0\1\161"+
    "\5\0\3\115\1\125\1\162\1\113\17\0\1\254\75\0"+
    "\1\255\32\0\12\40\1\135\7\40\1\256\30\40\1\256"+
    "\21\40\1\135\2\40\1\257\45\40\5\54\1\260\1\54"+
    "\1\145\53\54\10\0\2\113\3\0\2\115\1\0\1\115"+
    "\1\261\1\115\3\0\3\115\1\0\12\115\1\0\1\161"+
    "\5\0\3\115\1\125\1\162\1\113\12\0\2\113\3\0"+
    "\1\115\1\262\1\0\3\115\3\0\3\115\1\0\12\115"+
    "\1\0\1\161\5\0\3\115\1\125\1\162\1\113\12\0"+
    "\2\113\3\0\2\115\1\0\3\115\3\0\3\115\1\0"+
    "\11\115\1\263\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\1\264\2\115"+
    "\3\0\3\115\1\0\12\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\3\115\3\0\3\115\1\0\5\115\1\265\4\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\1\115\1\266\1\115\3\0\3\115"+
    "\1\0\12\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\1\115\1\267\10\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\2\115\1\270\3\0\3\115\1\0\12\115\1\0"+
    "\1\161\5\0\1\270\2\115\1\125\1\162\1\113\12\0"+
    "\2\113\3\0\2\115\1\0\3\115\3\0\3\115\1\0"+
    "\10\115\1\271\1\115\1\0\1\161\5\0\3\115\1\125"+
    "\1\162\1\113\12\0\2\113\3\0\2\115\1\0\3\115"+
    "\3\0\3\115\1\0\1\115\1\272\10\115\1\0\1\161"+
    "\5\0\3\115\1\125\1\162\1\113\12\0\2\113\3\0"+
    "\2\115\1\0\3\115\3\0\3\115\1\0\6\115\1\273"+
    "\3\115\1\0\1\161\5\0\3\115\1\125\1\162\1\113"+
    "\2\0\13\255\1\0\1\274\46\255\12\40\1\135\2\40"+
    "\1\275\57\40\1\135\3\40\1\276\44\40\10\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\4\115"+
    "\1\277\5\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\1\300\1\115\1\0\3\115"+
    "\3\0\3\115\1\0\12\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\3\115\3\0\3\115\1\0\3\115\1\301\6\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\7\115"+
    "\1\302\2\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\2\115\1\303"+
    "\3\0\3\115\1\0\12\115\1\0\1\161\5\0\1\303"+
    "\2\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\3\115\3\0\3\115\1\0\11\115\1\304\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\2\115\1\305\3\0\3\115\1\0"+
    "\12\115\1\0\1\161\5\0\1\305\2\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\5\115\1\306\4\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\3\115\3\0\3\115\1\0\3\115\1\307\6\115"+
    "\1\0\1\161\5\0\3\115\1\125\1\162\1\113\2\0"+
    "\13\255\1\0\1\274\2\255\1\310\43\255\12\40\1\135"+
    "\3\40\1\311\56\40\1\135\2\40\1\312\45\40\10\0"+
    "\2\113\3\0\2\115\1\0\3\115\1\313\2\0\3\115"+
    "\1\0\12\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\4\115\1\314\5\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\1\315\2\115\3\0\3\115\1\0\12\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\2\115"+
    "\1\316\7\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\1\317\2\115"+
    "\3\0\3\115\1\0\12\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\1\115\1\320\1\115\3\0\3\115\1\0\12\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\1\115\1\321\1\0\3\115\3\0\3\115\1\0"+
    "\12\115\1\0\1\161\5\0\3\115\1\125\1\162\1\113"+
    "\2\0\12\40\1\135\2\40\1\322\45\40\23\0\1\323"+
    "\47\0\2\113\3\0\2\115\1\0\3\115\3\0\3\115"+
    "\1\0\1\115\1\324\10\115\1\0\1\161\5\0\3\115"+
    "\1\125\1\162\1\113\12\0\2\113\3\0\2\115\1\0"+
    "\3\115\3\0\3\115\1\0\6\115\1\325\3\115\1\0"+
    "\1\161\5\0\3\115\1\125\1\162\1\113\12\0\2\113"+
    "\3\0\2\115\1\0\3\115\3\0\3\115\1\0\5\115"+
    "\1\326\4\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\12\0\2\113\3\0\2\115\1\0\3\115\3\0"+
    "\3\115\1\0\3\115\1\327\6\115\1\0\1\161\5\0"+
    "\3\115\1\125\1\162\1\113\12\0\2\113\3\0\2\115"+
    "\1\0\1\115\1\330\1\115\3\0\3\115\1\0\12\115"+
    "\1\0\1\161\5\0\3\115\1\125\1\162\1\113\12\0"+
    "\2\113\3\0\1\115\1\331\1\0\3\115\3\0\3\115"+
    "\1\0\12\115\1\0\1\161\5\0\3\115\1\125\1\162"+
    "\1\113\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7701];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\16\0\5\1\1\11\5\1\1\0\1\1\2\0"+
    "\1\1\1\0\13\1\2\0\1\11\1\1\1\11\2\1"+
    "\10\11\2\1\2\11\1\1\2\11\1\1\2\11\1\1"+
    "\1\0\1\1\1\0\14\1\2\0\1\1\2\0\1\11"+
    "\1\0\1\11\4\0\1\1\6\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\1\1\11\1\0\13\1"+
    "\2\0\3\11\2\0\1\1\1\11\1\0\1\11\2\0"+
    "\1\11\14\1\4\0\1\11\1\0\1\11\15\1\1\11"+
    "\3\0\1\11\13\1\3\0\12\1\1\0\1\1\1\11"+
    "\6\1\2\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int parenBalanceInDirective = 0; //for directive arguments
    private boolean argHasVariable = false;
    private int pushBackCount = 0;

    public BladeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state(), parenBalanceInDirective);
        } else {
            //initial state
            stack.push(ST_HTML);
            zzState = ST_HTML;
            zzLexicalState = ST_HTML;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final int parenBalanceInDirective; 

        LexerState(ByteStack stack, int zzState, int zzLexicalState, int parenBalanceInDirective) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.parenBalanceInDirective = parenBalanceInDirective;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                //&& (this.zzLexicalState == state.zzLexicalState)
                //&& (this.parenBalanceInDirective == state.parenBalanceInDirective)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.parenBalanceInDirective;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, parenBalanceInDirective);
    }

    public void setState(LexerState state, int parenBalanceInDirective) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.parenBalanceInDirective = state.parenBalanceInDirective;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    /**
     * Returns the smallest of multiple index values.
     *
     * @param values values
     * @return the smallest of multiple index values, -1 if all values are -1
     */
    private static int minIndex(int... values) {
        assert values.length != 0 : "No values"; // NOI18N
        boolean first = true;
        int min = -1;
        for (int value : values) {
            if (value == -1) {
                continue;
            }
            if (first) {
                first = false;
                min = value;
                continue;
            }
            min = Math.min(min, value);
        }
        return min;
    }

    /**
     * Get the first whitespace index of text.
     *
     * @param text the text
     * @return the first index of whitespace if whitespace exists, otherwise -1
     */
    private static int firstWhitespaceIndexOf(String text) {
        return minIndex(
            text.indexOf(' '),
            text.indexOf('\n'),
            text.indexOf('\r'),
            text.indexOf('\t')
        );
    }

    private boolean isWhitespace(){
    	return yytext().replaceAll("\\s+","").length() == 0;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BladeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BladeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1798) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public BladeTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.NEWLINE;
          }
        case 72: break;
        case 34: 
          { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 73: break;
        case 33: 
          { if (yylength() == 2){
	    popState(); 
		return BladeTokenId.T_CLOSE_PHP;
	}
	yypushback(2);
    return BladeTokenId.T_PHP;
          }
        case 74: break;
        case 17: 
          { //second param state
	String yytext = yytext();
	parenBalanceInDirective++;
	if (yylength() == 1 && parenBalanceInDirective == 1){
		return BladeTokenId.BLADE_PHP_TOKEN;
	}
          }
        case 75: break;
        case 45: 
          { String yytext = yytext();
    if (yylength() == 2){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(2);
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 76: break;
        case 18: 
          { //second param state
    String yytext = yytext();
    parenBalanceInDirective--;
    if (yylength() == 1){
    	parenBalanceInDirective=0;
        yybegin(ST_AFTER_DIRECTIVE_ARG);
        return BladeTokenId.BLADE_PHP_TOKEN;
    }
    if (parenBalanceInDirective <= 0){
		yypushback(1);
        return BladeTokenId.T_BLADE_PHP_VAR;
    }
          }
        case 77: break;
        case 48: 
          { pushState(ST_BLADE_PHP);
    return BladeTokenId.T_BLADE_PHP_OPEN;
          }
        case 78: break;
        case 49: 
          { pushState(ST_PHP_LOOKING_FOR_LOOP_EXPR);
    return BladeTokenId.T_BLADE_FOR;
          }
        case 79: break;
        case 40: 
          { //email test
    String yytext = yytext();
    return BladeTokenId.T_HTML;
          }
        case 80: break;
        case 20: 
          { //directive end
    parenBalanceInDirective--;
    String yytext = yytext();
    if (yylength() == 1 && parenBalanceInDirective == 0){
        yybegin(ST_AFTER_DIRECTIVE_ARG);
        return BladeTokenId.BLADE_PHP_TOKEN;
    }
    if (parenBalanceInDirective <= 0){
    	parenBalanceInDirective++;
	    yypushback(1);
    	return BladeTokenId.T_BLADE_PHP_VAR;
    }
          }
        case 81: break;
        case 21: 
          { //debug comma value
	String yytext = yytext();
	int debug = 5;
	pushState(ST_LOOKING_FOR_SECOND_PARAMETER);
	if (yylength() == 1) {
		return BladeTokenId.T_BLADE_COMMA;
	}
          }
        case 82: break;
        case 31: 
          { String yytext = yytext();
   pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
   return BladeTokenId.T_BLADE_DIRECTIVE;
          }
        case 83: break;
        case 26: 
          { switch (zzLexicalState) {
            case ST_PHP_LOOKING_FOR_IF_EXPR:
                    popState();
                    pushState(ST_PHP_IF_EXPR);
                    break;
            case ST_PHP_LOOKING_FOR_LOOP_EXPR:
                    popState();
                    pushState(ST_PHP_LOOP_EXPR);
                    break;
	}
	parenBalanceInDirective++;
	return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 84: break;
        case 61: 
          { pushState(ST_PHP_LOOKING_FOR_IF_EXPR);
    return BladeTokenId.T_BLADE_ELSEIF;
          }
        case 85: break;
        case 54: 
          { return BladeTokenId.T_BLADE_STOP;
          }
        case 86: break;
        case 43: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP;
          }
        case 87: break;
        case 19: 
          { //search for next tokens
          }
        case 88: break;
        case 57: 
          { return BladeTokenId.T_BLADE_ENDIF;
          }
        case 89: break;
        case 68: 
          { pushState(ST_PHP_LOOKING_FOR_LOOP_EXPR);
    return BladeTokenId.T_BLADE_FOREACH;
          }
        case 90: break;
        case 44: 
          { if (yylength() == 2){
       popState();
       return BladeTokenId.T_CLOSE_PHP;
    }
    yypushback(2);
    return BladeTokenId.T_PHP_ECHO;
          }
        case 91: break;
        case 36: 
          { //should have a flag for include
	//string debug
	String yytext = yytext();
	int debug = 1;
	//might catch other values also
	if (yytext.startsWith("\"")){
            return BladeTokenId.BLADE_PHP_STRING;
	}
          }
        case 92: break;
        case 30: 
          { String yytext = yytext();
    return BladeTokenId.T_HTML;
          }
        case 93: break;
        case 38: 
          { String yytext = yytext();
	yypushback(1);
	return BladeTokenId.WHITESPACE;
          }
        case 94: break;
        case 13: 
          { //inline div tag directive
	yybegin(ST_HTML);
	return BladeTokenId.T_HTML;
          }
        case 95: break;
        case 69: 
          { String ttext = yytext();
    popState();
    return BladeTokenId.T_BLADE_ENDPHP;
          }
        case 96: break;
        case 4: 
          { //wait until something relevent is found
          }
        case 97: break;
        case 65: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_EXTENDS;
          }
        case 98: break;
        case 66: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_INCLUDE;
          }
        case 99: break;
        case 2: 
          { String yytext = yytext();
	//whitespace
    return BladeTokenId.WHITESPACE;
          }
        case 100: break;
        case 46: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO_ESCAPED;
          }
        case 101: break;
        case 62: 
          { return BladeTokenId.T_XML;
          }
        case 102: break;
        case 37: 
          { //string debug
	String yytext = yytext();
	int debug = 1;
	//might catch other values also
	if (yytext.startsWith("'")){
		return BladeTokenId.BLADE_PHP_STRING;
	}
          }
        case 103: break;
        case 1: 
          { int wstart = 0;
    int firstReverseNW = yytext().length() - 1;
	  String text = yytext();
	  int textLength = yylength();
	  boolean foundWhitespace = false;
      
  	if (text.trim().length() == textLength){
      	return BladeTokenId.T_HTML;
    }
    
    pushBackCount = 0;

    while (firstReverseNW >= 0) {
        Character c = yytext().charAt(firstReverseNW);
        if (!Character.isWhitespace(yytext().charAt(firstReverseNW))){
            firstReverseNW++;
            break;
        }
        foundWhitespace = true;
        firstReverseNW--;
    }
    if (foundWhitespace && firstReverseNW > 0) {
        int diff = yylength() - firstReverseNW;
        yypushback(diff);
        String ddText = text.substring(0, firstReverseNW);
        int dd = 1;
    }
    return BladeTokenId.T_HTML;
          }
        case 104: break;
        case 59: 
          { return BladeTokenId.T_BLADE_PARENT;
          }
        case 105: break;
        case 29: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO);
    return BladeTokenId.T_BLADE_OPEN_ECHO;
          }
        case 106: break;
        case 64: 
          { return BladeTokenId.T_BLADE_ENDPHP;
          }
        case 107: break;
        case 16: 
          { //second param state
          }
        case 108: break;
        case 63: 
          { String ttext = yytext();
    popState();
    if (yylength() == "@endphp".length()){
        return BladeTokenId.T_BLADE_ENDPHP;
    }
    
    yypushback("@endphp".length());
    return BladeTokenId.T_BLADE_PHP;
          }
        case 109: break;
        case 51: 
          { popState();
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 110: break;
        case 58: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_YIELD;
          }
        case 111: break;
        case 47: 
          { pushState(ST_COMMENT);
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 112: break;
        case 9: 
          { popState();
        return BladeTokenId.WHITESPACE;
          }
        case 113: break;
        case 24: 
          { String yytext = yytext();
	parenBalanceInDirective++;
	if (yylength() == 1 && parenBalanceInDirective == 1){
		return BladeTokenId.BLADE_PHP_TOKEN;
	}
          }
        case 114: break;
        case 15: 
          { //directive end
    parenBalanceInDirective--;
    String yytext = yytext();
    if (parenBalanceInDirective == 0){
        yybegin(ST_AFTER_DIRECTIVE_ARG);
    }
    return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 115: break;
        case 56: 
          { yypushback(4);
    return BladeTokenId.T_BLADE_COMMENT;
          }
        case 116: break;
        case 50: 
          { String yytext = yytext();
    if (yylength() == 3){
    	popState();
    	return BladeTokenId.T_BLADE_CLOSE_ECHO;
    }
    yypushback(3);
    return BladeTokenId.T_BLADE_PHP_ECHO;
          }
        case 117: break;
        case 8: 
          { return BladeTokenId.T_HTML;
          }
        case 118: break;
        case 39: 
          { String yytext = yytext();
    pushState(ST_BLADE_ECHO_ESCAPED);
    return BladeTokenId.T_BLADE_OPEN_ECHO_ESCAPED;
          }
        case 119: break;
        case 12: 
          { //unfinished directive arg
	yybegin(ST_HTML);
    return BladeTokenId.WHITESPACE;
          }
        case 120: break;
        case 71: 
          { return BladeTokenId.T_BLADE_ENDFOREACH;
          }
        case 121: break;
        case 11: 
          { String yytext = yytext();
    if (yytext.contains("\n")){
        //finish searching for arguments
        yybegin(ST_HTML);
    }
    if (isWhitespace()){
    	return BladeTokenId.WHITESPACE;
    }
          }
        case 122: break;
        case 70: 
          { return BladeTokenId.T_BLADE_ENDSECTION;
          }
        case 123: break;
        case 42: 
          { pushState(ST_PHP_ECHO);
    return BladeTokenId.T_PHP_OPEN_ECHO;
          }
        case 124: break;
        case 25: 
          { String yytext = yytext();
    parenBalanceInDirective--;
    if (yylength() == 1){
    	parenBalanceInDirective=0;
        yybegin(ST_AFTER_DIRECTIVE_ARG);
        return BladeTokenId.BLADE_PHP_TOKEN;
    }
    if (parenBalanceInDirective == 0){
    	yypushback(1);
    	switch (zzLexicalState) {
        case ST_PHP_IF_EXPR:
                return BladeTokenId.T_BLADE_PHP_COND;
        case ST_PHP_LOOP_EXPR:
                return BladeTokenId.T_BLADE_PHP_LOOP_PARAM;
        } 
    }
          }
        case 125: break;
        case 32: 
          { //html comment
    return BladeTokenId.T_HTML;
          }
        case 126: break;
        case 27: 
          { yypushback(yylength());
	yybegin(ST_HTML);
          }
        case 127: break;
        case 5: 
          { //if (yylength() > 1) {
        //    yypushback(1);
        //}
        //pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 128: break;
        case 55: 
          { pushState(ST_PHP);
    return BladeTokenId.T_OPEN_PHP;
          }
        case 129: break;
        case 41: 
          { pushState(ST_PHP_LOOKING_FOR_IF_EXPR);
    return BladeTokenId.T_BLADE_IF;
          }
        case 130: break;
        case 35: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_BLADE_CLOSE_ECHO;
          }
        case 131: break;
        case 67: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_SECTION;
          }
        case 132: break;
        case 10: 
          { //any char directive arg
    String yytext = yytext();
    int debug = 1;
    //wait until something relevant is found
          }
        case 133: break;
        case 60: 
          { return BladeTokenId.T_BLADE_ENDFOR;
          }
        case 134: break;
        case 53: 
          { pushState(ST_PHP_LOOKING_FOR_DIRECTIVE_ARG);
    return BladeTokenId.T_BLADE_EACH;
          }
        case 135: break;
        case 52: 
          { return BladeTokenId.T_BLADE_ELSE;
          }
        case 136: break;
        case 22: 
          { String yytext = yytext();
    int debug = 1;
    //wait until something relevant is found
          }
        case 137: break;
        case 14: 
          { //directive paranthesis
	parenBalanceInDirective++;
	pushState(ST_BLADE_ARGUMENT);
    return BladeTokenId.BLADE_PHP_TOKEN;
          }
        case 138: break;
        case 7: 
          { String yytext = yytext();
    popState();
    return BladeTokenId.T_HTML;
          }
        case 139: break;
        case 6: 
          { //no break;
          }
        case 140: break;
        case 23: 
          { 
          }
        case 141: break;
        case 28: 
          { yybegin(ST_HTML);
	return BladeTokenId.WHITESPACE;
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP: {
              if (input.readLength() > 0) {
    input.backup(1);  // backup eof
    return BladeTokenId.T_PHP;
  }
  else {
      return null;
  }
            }
            case 218: break;
            case ST_COMMENT: {
              if (input.readLength() > 0) {
    input.backup(1);  // backup eof
    return BladeTokenId.T_BLADE_COMMENT;
  }
  else {
      return null;
  }
            }
            case 219: break;
            default:
              {         if(input.readLength() > 0) {
            String yytext = yytext();
            // backup eof
            input.backup(1);
            //and return the text as error token
             return BladeTokenId.T_HTML;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
